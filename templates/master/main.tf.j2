{% if var.availability_zones is defined %}
{% set availability_zones = var.availability_zones %}
{% else %}
{% set availability_zones = aws_availability_zones[var.region] %}
{% endif %}

resource "aws_iam_instance_profile" "consul-master-{{name}}" {
  name_prefix = "{{ var.datacenter }}"
  path        = "/"
  role        = "${aws_iam_role.{{name}}-consul-master-instance-role.name}"

  # aws_launch_configuration.launch_configuration in this module sets create_before_destroy to true, which means
  # everything it depends on, including this resource, must set it as well, or you'll get cyclic dependency errors
  # when you try to do a terraform destroy.
  lifecycle {
    create_before_destroy = true
  }
}

data "aws_iam_policy_document" "{{name}}-consul-master-instance-role" {
  statement {
    effect  = "Allow"
    actions = ["sts:AssumeRole"]

    principals {
      type        = "Service"
      identifiers = ["ec2.amazonaws.com"]
    }
  }
}

resource "aws_iam_role" "{{name}}-consul-master-instance-role" {
  name_prefix        = "{{ var.datacenter }}"
  assume_role_policy = "${data.aws_iam_policy_document.{{name}}-consul-master-instance-role.json}"

  # aws_iam_instance_profile.consul-master-{{name}} in this module sets create_before_destroy to true, which means
  # everything it depends on, including this resource, must set it as well, or you'll get cyclic dependency errors
  # when you try to do a terraform destroy.
  lifecycle {
    create_before_destroy = true
  }
}

module "iam_policies" {
  source = "modules/consul-iam-policies"
  iam_role_id = "${aws_iam_role.{{name}}-consul-master-instance-role.id}"
}

resource "aws_security_group" "{{ name }}-consul-master" {
  name        = "{{ name }}-consul-master"
  description = "{{ name }}-consul-master security group"
  vpc_id      = "${data.aws_vpc.{{ var.networking }}.id}"
  tags = {
    consul_datacenter = "{{ var.datacenter }}"
  }
  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
{% if var.ingress is defined %}
{% for ingress in var.ingress %}
  ingress {
    from_port = {{ ingress.from_port }}
    to_port = {{ ingress.to_port }}
    protocol = "{{ ingress.protocol }}"
    cidr_blocks = {{ ingress.cidr_blocks | to_json }}
  }
{% endfor %}
{% endif %}
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
  ingress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["${data.aws_vpc.default.cidr_block}"]
  }  
}

data "aws_ami" "{{name}}-consul-master" {
  filter {
    name   = "name"
    values = ["ambisafe-ubuntu-18.04-node-*"]
  }
  {% if tf_ami_owner is defined %}
    owners = {{ tf_ami_owners | to_json }}
  {% else %}
  owners = ["self"]  
  {% endif %}
  most_recent = true
}

resource "aws_key_pair" "{{name}}-consul-master" {
  key_name   = "{{organization_name}}-{{name}}-consul-master"
  public_key = "{{ lookup('file', var.key.public) }}"
}


locals {
  {{name}}-consul-master-userdata = <<USERDATA
#!/bin/bash -xe
CONSUL_HOSTNAME={{ cluster_hostnames["master"] }}-$(python -c 'import uuid; print(hex(uuid.getnode())[-7:-1]).lower()')
ansible-playbook -e hostname=$$CONSUL_HOSTNAME /etc/ansible/set-hostname.yml

ansible-playbook -e "{consul_datacenter: {{ var.datacenter }}, consul_domain: {{ var.consul_domain }}, consul_ui: {{ var.consul_ui }}, consul_acl_master_token: {{ var.token }} }" /etc/ansible/run-consul-server.yml
ansible-playbook -e "{vault_ui: {{ var.vault_ui }}, consul_domain: {{ var.consul_domain }} }" /etc/ansible/run-vault-server.yml
ansible-playbook /etc/ansible/update-sshd.yml
USERDATA
}

resource "aws_launch_configuration" "{{name}}-consul-master" {
  associate_public_ip_address = {{ var.with_public_ip | to_json }}
  iam_instance_profile        = "${aws_iam_instance_profile.consul-master-{{name}}.name}"
  image_id                    = "${data.aws_ami.{{name}}-consul-master.id}"
  instance_type               = "{{ var.instance_type }}"
  name_prefix                 = "{{ name }}-master"
  security_groups             = ["${aws_security_group.{{ name }}-consul-master.id}"]
  user_data_base64            = "${base64encode(local.{{ name }}-consul-master-userdata)}"
  key_name                    = "${aws_key_pair.{{name}}-consul-master.key_name}"
  lifecycle {
    create_before_destroy = true
  }
}

resource "aws_placement_group" "{{name}}-consul-master" {
    name = "{{name}}-consul-master"
    strategy = "spread"
}


resource "aws_autoscaling_group" "{{name}}-consul-master" {
  desired_capacity     = "{% if var.desired_capacity is defined %}{{ var.desired_capacity }}{% else %}${ {{ availability_zones | length }} * {{ var.workers_per_zone }} }{% endif %}"

  launch_configuration = "${aws_launch_configuration.{{name}}-consul-master.id}"
  placement_group      = "${aws_placement_group.{{name}}-consul-master.id}"
  min_size             = {% if var.min_size is defined %}{{var.min_size}}{% else %}{{ availability_zones | length }}{% endif %}

  max_size             = "{% if var.max_size is defined %}{{var.max_size}}{% else %}${ {{ availability_zones | length }} * {{ var.workers_per_zone }} }{% endif %}"
  
  name                 = "{{name}}-consul-master"
  vpc_zone_identifier  = [{% for az in availability_zones %}"${aws_subnet.{{ var.networking }}-{{az}}-{{ var.reachability }}.id}", {%endfor%}]

  tag {
    key                 = "Name"
    value               = "{{name}}-consul-master"
    propagate_at_launch = true
  }
  tag {
    key                 = "datacenter"
    value               = "{{ var.datacenter }}"
    propagate_at_launch = true
  }
  tag {
    key                 = "consul"
    value               = "server"
    propagate_at_launch = true
  }
  tag {
    key                 = "organization"
    value               = "{{ organization_name }}"
    propagate_at_launch = true
  }
  tag {
    key                 = "environment"
    value               = "{{ project_deployment_environment }}"
    propagate_at_launch = true
  }
}
