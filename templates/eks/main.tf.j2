########### EKS Master Cluster IAM Role
{% if var.availability_zones is defined %}
{% set availability_zones = var.availability_zones %}
{% else %}
{% set availability_zones = aws_availability_zones[var.region] %}
{% endif %}
resource "aws_iam_role" "kube-cluster-{{name}}" {
  name = "{{ name }}"
  assume_role_policy = <<POLICY
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Service": "eks.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
POLICY
}

resource "aws_iam_role_policy_attachment" "kube-cluster-{{name}}-AmazonEKSClusterPolicy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
  role       = "{{ "${aws_iam_role.kube-cluster-" + name + ".name}" }}"
}

resource "aws_iam_role_policy_attachment" "kube-cluster-{{name}}-AmazonEKSServicePolicy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSServicePolicy"
  role       = "{{ "${aws_iam_role.kube-cluster-" + name + ".name}" }}"
}

###########  EKS Master Cluster Security Group
 
resource "aws_security_group" "kube-cluster-{{name}}" {
  name        = "{{ name }}"
  description = "{{ name }} cluster communication with worker nodes"
  vpc_id = "${data.aws_vpc.{{var.networking}}.id}"

{% for ingress in var.ingress %}
  ingress {
    from_port = {{ ingress.from_port }}
    to_port = {{ ingress.to_port }}
    protocol = "{{ ingress.protocol }}"
    cidr_blocks = {{ ingress.cidr_blocks | to_json }}
  }
{% endfor %}

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  {% include "tags.tf.j2" %}
}

########## EKS Master Cluster

resource "aws_eks_cluster" "{{name}}" {
  name            = "{{ name }}"
  role_arn        = "{{ "${aws_iam_role.kube-cluster-" + name + ".arn}" }}"

  vpc_config {
    security_group_ids = ["{{ "${aws_security_group.kube-cluster-" + name + ".id}" }}"]
    subnet_ids  = [{% for az in availability_zones%}"${aws_subnet.{{ var.networking }}-{{az}}-private.id}", {%endfor%}]
  }

  depends_on = [
    "aws_iam_role_policy_attachment.kube-cluster-{{name}}-AmazonEKSClusterPolicy",
    "aws_iam_role_policy_attachment.kube-cluster-{{name}}-AmazonEKSServicePolicy",
  ]
}

######## Obtaining kubectl Configuration From Terraform

locals {
  kubeconfig = <<KUBECONFIG


apiVersion: v1
clusters:
- cluster:
    server: {{ "${aws_eks_cluster." + name + ".endpoint}" }}
    certificate-authority-data: {{ "${aws_eks_cluster." + name + ".certificate_authority.0.data}" }}
  name: {{ name }}
contexts:
- context:
    cluster: {{ name }}
    user: aws
  name: aws
current-context: aws
kind: Config
preferences: {}
users:
- name: aws
  user:
    exec:
      apiVersion: client.authentication.k8s.io/v1alpha1
      command: heptio-authenticator-aws
      args:
        - "token"
        - "-i"
        - "{{ name }}"
KUBECONFIG
}

output "kubeconfig" {
  value = "${local.kubeconfig}"
}

########### Worker Node # IAM Role and Instance Profile

resource "aws_iam_role" "kube-node-{{name}}" {
  name = "{{ name }}-node"

  assume_role_policy = <<POLICY
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Service": "ec2.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    },
    {
      "Effect": "Allow",
      "Resource": "arn:aws:ec2:*",
      "Action": [      
        "ec2:DescribeInstances",
        "ec2:DescribeTags",
        "autoscaling:DescribeAutoScalingGroups"
        ]
    }
  ]
}
POLICY
}

resource "aws_iam_role_policy_attachment" "kube-node-{{name}}-AmazonEKSWorkerNodePolicy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
  role       = "{{ "${aws_iam_role.kube-node-" + name + ".name}" }}"
}


resource "aws_iam_role_policy_attachment" "kube-node-{{name}}-AmazonEKS_CNI_Policy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
  role       = "{{ "${aws_iam_role.kube-node-" + name + ".name}" }}"
}

resource "aws_iam_role_policy_attachment" "kube-node-{{name}}-AmazonEC2ContainerRegistryReadOnly" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
  role       = "{{ "${aws_iam_role.kube-node-" + name + ".name}" }}"
}

resource "aws_iam_instance_profile" "kube-node-{{name}}" {
  name = "{{ name }}-node"
  role = "{{ "${aws_iam_role.kube-node-" + name + ".name}" }}"
}

########### Worker Node # Security Group

resource "aws_security_group" "kube-node-{{name}}" {
  name        = "kube-node-{{ name }}"
  description = "Security group for all nodes in the cluster {{ name }}"
  vpc_id = "${data.aws_vpc.{{var.networking}}.id}"

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = "${
    map(
     "Name", "kube-node-{{ name }}",
     "kubernetes.io/cluster/{{ name }}", "owned",
    )
  }"
}

resource "aws_security_group_rule" "kube-node-{{name}}-ingress-self" {
  description              = "Allow node to communicate with each other"
  from_port                = 0
  protocol                 = "-1"
  security_group_id        = "${aws_security_group.kube-node-{{name}}.id}"
  source_security_group_id = "${aws_security_group.kube-node-{{name}}.id}"
  to_port                  = 65535
  type                     = "ingress"
}

resource "aws_security_group_rule" "kube-node-{{name}}-ingress-cluster" {
  description              = "Allow worker Kubelets and pods to receive communication from the cluster control plane"
  from_port                = 1025
  protocol                 = "tcp"

  security_group_id        = "{{ "${aws_security_group.kube-node-" + name + ".id}" }}"
  source_security_group_id = "{{ "${aws_security_group.kube-cluster-" + name + ".id}" }}"
  to_port                  = 65535
  type                     = "ingress"
}

########### Worker Node # Access to EKS Master Cluster

resource "aws_security_group_rule" "kube-cluster-{{name}}-ingress-node-https" {
  description              = "Allow pods to communicate with the cluster API Server"
  from_port                = 443
  protocol                 = "tcp"
  security_group_id        = "{{ "${aws_security_group.kube-node-" + name + ".id}" }}"
  source_security_group_id = "{{ "${aws_security_group.kube-cluster-" + name + ".id}" }}"
  to_port                  = 443
  type                     = "ingress"
}

########### Worker Node # AutoScaling Group
data "aws_ami" "eks-worker-{{name}}" {
  filter {
    name   = "name"
    values = ["ambisafe-amazon-linux-2-kube-worker-*"]
  }
  {% if tf_ami_owners is defined %}
  owners = {{ tf_ami_owners | to_json }}
  {% else %}
  owners = ["self"]
  {% endif %}
  most_recent = true
}

# This data source is included for ease of sample architecture deployment
# and can be swapped out as necessary.

# EKS currently documents this required userdata for EKS worker nodes to
# properly configure Kubernetes applications on the EC2 instance.
# We utilize a Terraform local here to simplify Base64 encoding this
# information into the AutoScaling Launch Configuration.
# More information: https://amazon-eks.s3-us-west-2.amazonaws.com/1.10.3/2018-06-05/amazon-eks-nodegroup.yaml
locals {
  kube-node-{{name}}-userdata = <<USERDATA
#!/bin/bash -xe
CONSUL_HOSTNAME={{ cluster_hostnames["kube-worker"] }}-$(python -c 'import uuid; print(hex(uuid.getnode())[-7:-1]).lower()')
ansible-playbook -e hostname=$$CONSUL_HOSTNAME /etc/ansible/set-hostname.yml
ansible-playbook -e "{consul_datacenter: {{var.datacenter}}, \
                                      consul_domain: {{var.consul_domain}}, \
                                      consul_acl_master_token: masterhyastertoken, \
                                      consul_addr: 10.0.2.2, \
                                      vault_master_token: vaulthyaulttoken, \
                                      }" \
                /etc/ansible/run-cluster-agent.yml
ansible-playbook -e "{kubelet_id: $$CONSUL_HOSTNAME, \
                                      kubelet_tags: [___name___,], \
                                      consul_domain: {{var.consul_domain}} }" \
                /etc/ansible/consul-kubelet-registration.yml

CA_CERTIFICATE_DIRECTORY=/etc/kubernetes/pki
CA_CERTIFICATE_FILE_PATH=$CA_CERTIFICATE_DIRECTORY/ca.crt
mkdir -p $CA_CERTIFICATE_DIRECTORY
echo "{{ "${aws_eks_cluster." + name + ".certificate_authority.0.data}" }}" | base64 -d >  $CA_CERTIFICATE_FILE_PATH
INTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)
sed -i s,MASTER_ENDPOINT,{{ "${aws_eks_cluster." + name + ".endpoint}" }},g /var/lib/kubelet/kubeconfig
sed -i s,CLUSTER_NAME,{{ name }},g /var/lib/kubelet/kubeconfig
sed -i s,REGION,${data.aws_region.current.name},g /etc/systemd/system/kubelet.service
sed -i s,MAX_PODS,20,g /etc/systemd/system/kubelet.service
sed -i s,MASTER_ENDPOINT,{{ "${aws_eks_cluster." + name + ".endpoint}" }},g /etc/systemd/system/kubelet.service
sed -i s,INTERNAL_IP,$INTERNAL_IP,g /etc/systemd/system/kubelet.service
DNS_CLUSTER_IP=10.100.0.10
if [[ $INTERNAL_IP == 10.* ]] ; then DNS_CLUSTER_IP=172.20.0.10; fi
sed -i s,DNS_CLUSTER_IP,$DNS_CLUSTER_IP,g /etc/systemd/system/kubelet.service
sed -i s,CERTIFICATE_AUTHORITY_FILE,$CA_CERTIFICATE_FILE_PATH,g /var/lib/kubelet/kubeconfig
sed -i s,CLIENT_CA_FILE,$CA_CERTIFICATE_FILE_PATH,g  /etc/systemd/system/kubelet.service
systemctl daemon-reload
systemctl restart kubelet kube-proxy
USERDATA
}

resource "aws_launch_configuration" "kube-{{name}}" {
  associate_public_ip_address = true
  iam_instance_profile        = "{{ "${aws_iam_instance_profile.kube-node-" + name + ".name}" }}"
  image_id                    = "${data.aws_ami.eks-worker-{{name}}.id}"
  instance_type               = "{{ var.instance_type }}"
  name_prefix                 = "{{ name }}"
  security_groups             = ["{{ "${aws_security_group.kube-node-" + name + ".id}" }}"]
  user_data_base64            = "{{ "${base64encode(local.kube-node-" + name + "-userdata)}" }}"

  lifecycle {
    create_before_destroy = true
  }
}

resource "aws_placement_group" "kube-node-{{name}}" {
    name = "kube-node-{{name}}"
    strategy = "spread"
}


resource "aws_autoscaling_group" "kube-node-{{name}}" {
  desired_capacity     = "{% if var.desired_capacity is defined %}{{ var.desired_capacity }}{% else %}${ {{ availability_zones | length }} * {{ var.workers_per_zone }} }{% endif %}"

  launch_configuration = "{{ "${aws_launch_configuration.kube-" + name + ".id}" }}"
  placement_group      = "{{ "${aws_placement_group.kube-node-" + name + ".id}" }}"
  min_size             = {% if var.min_size is defined %}{{var.min_size}}{% else %}{{ availability_zones | length }}{% endif %}
  max_size             = "{% if var.max_size is defined %}{{var.max_size}}{% else %}${ {{ availability_zones | length }} * {{ var.workers_per_zone }} }{% endif %}"
  name                 = "{{name}}-kube-node"
  vpc_zone_identifier  = [{% for az in availability_zones%}"${aws_subnet.{{ var.networking }}-{{az}}-private.id}", {%endfor%}]

  tag {
    key                 = "Name"
    value               = "{{name}}-kube-node"
    propagate_at_launch = true
  }

  tag {
    key                 = "kubernetes.io/cluster/{{ name }}"
    value               = "owned"
    propagate_at_launch = true
  }
  tag {
    key                 = "datacenter"
    value               = "{{ var.datacenter }}"
    propagate_at_launch = true
  }
  tag {
    key                 = "consul"
    value               = "agent"
    propagate_at_launch = true
  }
  tag {
    key                 = "organization"
    value               = "{{ organization_name }}"
    propagate_at_launch = true
  }
  tag {
    key                 = "environment"
    value               = "{{ project_deployment_environment }}"
    propagate_at_launch = true
  }
}

locals {
  config-map-aws-auth = <<CONFIGMAPAWSAUTH
apiVersion: v1
kind: ConfigMap
metadata:
  name: aws-auth
  namespace: kube-system
data:
  mapRoles: |
    - rolearn: "{{ "${aws_iam_role.kube-node-" + name + ".arn}" }}"
      username: system:node:{% raw %}{{EC2PrivateDNSName}}{% endraw %}

      groups:
        - system:bootstrappers
        - system:nodes
CONFIGMAPAWSAUTH
}

output "config-map-aws-auth" {
  value = "${local.config-map-aws-auth}"
}
