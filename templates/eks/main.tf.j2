variable "cluster-name" {
  default = "{{ var.cluster_name }}"
  type    = "string"
}

########### EKS Master Cluster IAM Role

resource "aws_iam_role" "kube-cluster" {
  name = "${var.cluster-name}"

  assume_role_policy = <<POLICY
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Service": "eks.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
POLICY
}

resource "aws_iam_role_policy_attachment" "kube-cluster-AmazonEKSClusterPolicy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
  role       = "${aws_iam_role.kube-cluster.name}"
}

resource "aws_iam_role_policy_attachment" "kube-cluster-AmazonEKSServicePolicy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSServicePolicy"
  role       = "${aws_iam_role.kube-cluster.name}"
}

###########  EKS Master Cluster Security Group

resource "aws_security_group" "kube-cluster" {
  name        = "${var.cluster-name}"
  description = "Cluster communication with worker nodes"
{% if aws_vpc_default == true %}
  vpc_id = "${aws_default_vpc.this.id}"
{% else %}
  vpc_id = "{{ aws_vpc_id }}"
{% endif %}

{% for ingress in var.ingress %}
  ingress {
    from_port = {{ ingress.from_port }}
    to_port = {{ ingress.to_port }}
    protocol = "{{ ingress.protocol }}"
    cidr_blocks = {{ ingress.cidr_blocks | to_json }}
  }
{% endfor %}

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags {
    Name = "${var.cluster-name}"
  }
}

########## EKS Master Cluster

resource "aws_eks_cluster" "kube" {
  name            = "${var.cluster-name}"
  role_arn        = "${aws_iam_role.kube-cluster.arn}"

  vpc_config {
    security_group_ids = ["${aws_security_group.kube-cluster.id}"]
  {% if aws_vpc_default == true %}
        subnet_ids  = ["${aws_default_subnet.a.id}", "${aws_default_subnet.b.id}", "${aws_default_subnet.c.id}"]
  {% else %}
        subnet_ids  = ["{{ aws_subnet_id_a }}", "{{ aws_subnet_id_b }}" , "{{ aws_subnet_id_c }}"]
  {% endif %}

  }

  depends_on = [
    "aws_iam_role_policy_attachment.kube-cluster-AmazonEKSClusterPolicy",
    "aws_iam_role_policy_attachment.kube-cluster-AmazonEKSServicePolicy",
  ]
}

######## Obtaining kubectl Configuration From Terraform

locals {
  kubeconfig = <<KUBECONFIG


apiVersion: v1
clusters:
- cluster:
    server: ${aws_eks_cluster.kube.endpoint}
    certificate-authority-data: ${aws_eks_cluster.kube.certificate_authority.0.data}
  name: kubernetes
contexts:
- context:
    cluster: kubernetes
    user: aws
  name: aws
current-context: aws
kind: Config
preferences: {}
users:
- name: aws
  user:
    exec:
      apiVersion: client.authentication.k8s.io/v1alpha1
      command: heptio-authenticator-aws
      args:
        - "token"
        - "-i"
        - "${var.cluster-name}"
KUBECONFIG
}

output "kubeconfig" {
  value = "${local.kubeconfig}"
}

########### Worker Node # IAM Role and Instance Profile

resource "aws_iam_role" "kube-node" {
  name = "${var.cluster-name}-node"

  assume_role_policy = <<POLICY
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Service": "ec2.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
POLICY
}

resource "aws_iam_role_policy_attachment" "kube-node-AmazonEKSWorkerNodePolicy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
  role       = "${aws_iam_role.kube-node.name}"
}

resource "aws_iam_role_policy_attachment" "kube-node-AmazonEKS_CNI_Policy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
  role       = "${aws_iam_role.kube-node.name}"
}

resource "aws_iam_role_policy_attachment" "kube-node-AmazonEC2ContainerRegistryReadOnly" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
  role       = "${aws_iam_role.kube-node.name}"
}

resource "aws_iam_instance_profile" "kube-node" {
  name = "${var.cluster-name}-node"
  role = "${aws_iam_role.kube-node.name}"
}

########### Worker Node # Security Group

resource "aws_security_group" "kube-node" {
  name        = "${var.cluster-name}-node"
  description = "Security group for all nodes in the cluster"
{% if aws_vpc_default == true %}
  vpc_id = "${aws_default_vpc.this.id}"
{% else %}
  vpc_id = "{{ aws_vpc_id }}"
{% endif %}

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = "${
    map(
     "Name", "${var.cluster-name}-node",
     "kubernetes.io/cluster/${var.cluster-name}", "owned",
    )
  }"
}

resource "aws_security_group_rule" "kube-node-ingress-self" {
  description              = "Allow node to communicate with each other"
  from_port                = 0
  protocol                 = "-1"
  security_group_id        = "${aws_security_group.kube-node.id}"
  source_security_group_id = "${aws_security_group.kube-node.id}"
  to_port                  = 65535
  type                     = "ingress"
}

resource "aws_security_group_rule" "kube-node-ingress-cluster" {
  description              = "Allow worker Kubelets and pods to receive communication from the cluster control plane"
  from_port                = 1025
  protocol                 = "tcp"
  security_group_id        = "${aws_security_group.kube-node.id}"
  source_security_group_id = "${aws_security_group.kube-cluster.id}"
  to_port                  = 65535
  type                     = "ingress"
}

########### Worker Node # Access to EKS Master Cluster

resource "aws_security_group_rule" "kube-cluster-ingress-node-https" {
  description              = "Allow pods to communicate with the cluster API Server"
  from_port                = 443
  protocol                 = "tcp"
  security_group_id        = "${aws_security_group.kube-cluster.id}"
  source_security_group_id = "${aws_security_group.kube-node.id}"
  to_port                  = 443
  type                     = "ingress"
}

########### Worker Node # AutoScaling Group
data "aws_ami" "eks-worker" {
  filter {
    name   = "name"
    values = ["eks-worker-*"]
  }

  most_recent = true
  owners      = ["602401143452"] # Amazon Account ID
}

# This data source is included for ease of sample architecture deployment
# and can be swapped out as necessary.
data "aws_region" "current" {}

# EKS currently documents this required userdata for EKS worker nodes to
# properly configure Kubernetes applications on the EC2 instance.
# We utilize a Terraform local here to simplify Base64 encoding this
# information into the AutoScaling Launch Configuration.
# More information: https://amazon-eks.s3-us-west-2.amazonaws.com/1.10.3/2018-06-05/amazon-eks-nodegroup.yaml
locals {
  kube-node-userdata = <<USERDATA
#!/bin/bash -xe

CA_CERTIFICATE_DIRECTORY=/etc/kubernetes/pki
CA_CERTIFICATE_FILE_PATH=$CA_CERTIFICATE_DIRECTORY/ca.crt
mkdir -p $CA_CERTIFICATE_DIRECTORY
echo "${aws_eks_cluster.kube.certificate_authority.0.data}" | base64 -d >  $CA_CERTIFICATE_FILE_PATH
INTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)
sed -i s,MASTER_ENDPOINT,${aws_eks_cluster.kube.endpoint},g /var/lib/kubelet/kubeconfig
sed -i s,CLUSTER_NAME,${var.cluster-name},g /var/lib/kubelet/kubeconfig
sed -i s,REGION,${data.aws_region.current.name},g /etc/systemd/system/kubelet.service
sed -i s,MAX_PODS,20,g /etc/systemd/system/kubelet.service
sed -i s,MASTER_ENDPOINT,${aws_eks_cluster.kube.endpoint},g /etc/systemd/system/kubelet.service
sed -i s,INTERNAL_IP,$INTERNAL_IP,g /etc/systemd/system/kubelet.service
DNS_CLUSTER_IP=10.100.0.10
if [[ $INTERNAL_IP == 10.* ]] ; then DNS_CLUSTER_IP=172.20.0.10; fi
sed -i s,DNS_CLUSTER_IP,$DNS_CLUSTER_IP,g /etc/systemd/system/kubelet.service
sed -i s,CERTIFICATE_AUTHORITY_FILE,$CA_CERTIFICATE_FILE_PATH,g /var/lib/kubelet/kubeconfig
sed -i s,CLIENT_CA_FILE,$CA_CERTIFICATE_FILE_PATH,g  /etc/systemd/system/kubelet.service
systemctl daemon-reload
systemctl restart kubelet kube-proxy
USERDATA
}

resource "aws_launch_configuration" "kube" {
  associate_public_ip_address = true
  iam_instance_profile        = "${aws_iam_instance_profile.kube-node.name}"
  image_id                    = "${data.aws_ami.eks-worker.id}"
  instance_type               = "{{ var.instance_type }}"
  name_prefix                 = "${var.cluster-name}"
  security_groups             = ["${aws_security_group.kube-node.id}"]
  user_data_base64            = "${base64encode(local.kube-node-userdata)}"

  lifecycle {
    create_before_destroy = true
  }
}

resource "aws_autoscaling_group" "kube" {
  desired_capacity     = "{{ var.desired_capacity }}"
  launch_configuration = "${aws_launch_configuration.kube.id}"
  max_size             = "{{ var.max_size }}"
  min_size             = "{{ var.min_size }}"
  name                 = "tf-eks-kube"
  {% if aws_vpc_default == true %}
        vpc_zone_identifier  = ["${aws_default_subnet.a.id}", "${aws_default_subnet.b.id}", "${aws_default_subnet.c.id}"]
  {% else %}
        vpc_zone_identifier  = ["{{ aws_subnet_id_a }}", "{{ aws_subnet_id_b }}" , "{{ aws_subnet_id_c }}"]
  {% endif %}

  tag {
    key                 = "Name"
    value               = "${var.cluster-name}"
    propagate_at_launch = true
  }

  tag {
    key                 = "kubernetes.io/cluster/${var.cluster-name}"
    value               = "owned"
    propagate_at_launch = true
  }
}

locals {
  config-map-aws-auth = <<CONFIGMAPAWSAUTH
{% raw %}

apiVersion: v1
kind: ConfigMap
metadata:
  name: aws-auth
  namespace: kube-system
data:
  mapRoles: |
    - rolearn: ${aws_iam_role.kube-node.arn}
      username: system:node:{{EC2PrivateDNSName}}
      groups:
        - system:bootstrappers
        - system:nodes
{% endraw %}
CONFIGMAPAWSAUTH
}

output "config-map-aws-auth" {
  value = "${local.config-map-aws-auth}"
}
