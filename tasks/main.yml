---
- include_vars:
    file: vars/availability-zones.yml
    name: aws_availability_zones
  tags: configuration

# got terraform infrastructures for aws
- name: Create terraform data directory
  file:
    path: "{{ terraform_data_dir }}/{{ organization_name }}/{{ project_type }}/{{ project_name }}/{{ project_deployment_environment }}"
    state: directory
  tags: configuration

- name: Clean modules path
  file:
    state: absent
    path: "{{ terraform_data_dir }}/{{ organization_name }}/{{ project_type }}/{{ project_name }}/{{ project_deployment_environment }}/modules"
  tags: configuration

- name: Copy terraform files to host
  copy:
    src: "terraform_files/"
    dest: "{{ terraform_data_dir }}/{{ organization_name }}/{{ project_type }}/{{ project_name }}/{{ project_deployment_environment }}/"
    force: yes
  tags: configuration

- name: Create TF main
  template:
    src: main.tf.j2
    dest: "{{ terraform_data_dir }}/{{ organization_name }}/{{ project_type }}/{{ project_name }}/{{ project_deployment_environment }}/main.tf"
  tags: configuration

- name: Create TF variables
  template:
    src: variables.tf.j2
    dest: "{{ terraform_data_dir }}/{{ organization_name }}/{{ project_type }}/{{ project_name }}/{{ project_deployment_environment }}/variables.tf"
  tags: configuration

- name: Create TF outputs
  template:
    src: outputs.tf.j2
    dest: "{{ terraform_data_dir }}/{{ organization_name }}/{{ project_type }}/{{ project_name }}/{{ project_deployment_environment }}/outputs.tf"
  tags: configuration

- name: Create requirements.txt
  template:
    src: requirements.txt.j2
    dest: "{{ terraform_data_dir }}/{{ organization_name }}/{{ project_type }}/{{ project_name }}/{{ project_deployment_environment }}/requirements.txt"
  tags: configuration

- name: Create makefile
  template:
    src: Makefile.j2
    dest: "{{ terraform_data_dir }}/{{ organization_name }}/{{ project_type }}/{{ project_name }}/{{ project_deployment_environment }}/Makefile"
  tags: configuration

# run terraform init
- name: Run the terraform initialization
  command: "terraform init -no-color"
  args:
    chdir: "{{ terraform_data_dir }}/{{ organization_name }}/{{ project_type }}/{{ project_name }}/{{ project_deployment_environment }}"
  environment:
    AWS_DEFAULT_REGION: "{{ aws_region }}"
  tags: configuration

- name: Run the terraform update modules
  command: "terraform get -update -no-color"
  args:
    chdir: "{{ terraform_data_dir }}/{{ organization_name }}/{{ project_type }}/{{ project_name }}/{{ project_deployment_environment }}"
  environment:
    AWS_DEFAULT_REGION: "{{ aws_region }}"
  tags: configuration

#run terraform plan
- name: Import networking
  shell: make tf-import-networking
  environment:
    AWS_DEFAULT_REGION: "{{ aws_region }}"
  args:
    chdir: "{{ terraform_data_dir }}/{{ organization_name }}/{{ project_type }}/{{ project_name }}/{{ project_deployment_environment }}"
  tags: state

- name: Run the terraform plan
  command: "terraform plan -no-color {{ terraform_arg }}"
  args:
    chdir: "{{ terraform_data_dir }}/{{ organization_name }}/{{ project_type }}/{{ project_name }}/{{ project_deployment_environment }}"
  environment:
    AWS_DEFAULT_REGION: "{{ aws_region }}"
  tags: state

#run terraform apply -auto-approve
- name: Run the installation on AWS
  command: "terraform apply -auto-approve -no-color {{ terraform_arg }}"
  args:
    chdir: "{{ terraform_data_dir }}/{{ organization_name }}/{{ project_type }}/{{ project_name }}/{{ project_deployment_environment }}"
  environment:
    AWS_DEFAULT_REGION: "{{ aws_region }}"
  tags: apply
